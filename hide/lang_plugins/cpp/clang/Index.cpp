#include <hide/lang_plugins/cpp/clang/Index.h>


namespace hide {
namespace cpp {
namespace clang
{

	std::string CXCursorKindToString(CXCursorKind kind)
	{
#define CX_CURSOR_TOSTRING(Val_) case CXCursor_##Val_: return #Val_
		switch (kind)
		{
		CX_CURSOR_TOSTRING(UnexposedDecl);
		CX_CURSOR_TOSTRING(StructDecl);
		CX_CURSOR_TOSTRING(UnionDecl);
		CX_CURSOR_TOSTRING(ClassDecl);
		CX_CURSOR_TOSTRING(EnumDecl);
		CX_CURSOR_TOSTRING(FieldDecl);
		CX_CURSOR_TOSTRING(EnumConstantDecl);
		CX_CURSOR_TOSTRING(FunctionDecl);
		CX_CURSOR_TOSTRING(VarDecl);
		CX_CURSOR_TOSTRING(ParmDecl);
		CX_CURSOR_TOSTRING(ObjCInterfaceDecl);
		CX_CURSOR_TOSTRING(ObjCCategoryDecl);
		CX_CURSOR_TOSTRING(ObjCProtocolDecl);
		CX_CURSOR_TOSTRING(ObjCPropertyDecl);
		CX_CURSOR_TOSTRING(ObjCIvarDecl);
		CX_CURSOR_TOSTRING(ObjCInstanceMethodDecl);
		CX_CURSOR_TOSTRING(ObjCClassMethodDecl);
		CX_CURSOR_TOSTRING(ObjCImplementationDecl);
		CX_CURSOR_TOSTRING(ObjCCategoryImplDecl);
		CX_CURSOR_TOSTRING(TypedefDecl);
		CX_CURSOR_TOSTRING(CXXMethod);
		CX_CURSOR_TOSTRING(Namespace);
		CX_CURSOR_TOSTRING(LinkageSpec);
		CX_CURSOR_TOSTRING(Constructor);
		CX_CURSOR_TOSTRING(Destructor);
		CX_CURSOR_TOSTRING(ConversionFunction);
		CX_CURSOR_TOSTRING(TemplateTypeParameter);
		CX_CURSOR_TOSTRING(NonTypeTemplateParameter);
		CX_CURSOR_TOSTRING(TemplateTemplateParameter);
		CX_CURSOR_TOSTRING(FunctionTemplate);
		CX_CURSOR_TOSTRING(ClassTemplate);
		CX_CURSOR_TOSTRING(ClassTemplatePartialSpecialization);
		CX_CURSOR_TOSTRING(NamespaceAlias);
		CX_CURSOR_TOSTRING(UsingDirective);
		CX_CURSOR_TOSTRING(UsingDeclaration);
		CX_CURSOR_TOSTRING(TypeAliasDecl);
		CX_CURSOR_TOSTRING(ObjCSynthesizeDecl);
		CX_CURSOR_TOSTRING(ObjCDynamicDecl);
		CX_CURSOR_TOSTRING(CXXAccessSpecifier);
		CX_CURSOR_TOSTRING(FirstRef);
		CX_CURSOR_TOSTRING(ObjCProtocolRef);
		CX_CURSOR_TOSTRING(ObjCClassRef);
		CX_CURSOR_TOSTRING(TypeRef);
		CX_CURSOR_TOSTRING(CXXBaseSpecifier);
		CX_CURSOR_TOSTRING(TemplateRef);
		CX_CURSOR_TOSTRING(NamespaceRef);
		CX_CURSOR_TOSTRING(MemberRef);
		CX_CURSOR_TOSTRING(LabelRef);
		CX_CURSOR_TOSTRING(OverloadedDeclRef);
		CX_CURSOR_TOSTRING(VariableRef);
		CX_CURSOR_TOSTRING(FirstInvalid);
		CX_CURSOR_TOSTRING(NoDeclFound);
		CX_CURSOR_TOSTRING(NotImplemented);
		CX_CURSOR_TOSTRING(InvalidCode);
		CX_CURSOR_TOSTRING(FirstExpr);
		CX_CURSOR_TOSTRING(DeclRefExpr);
		CX_CURSOR_TOSTRING(MemberRefExpr);
		CX_CURSOR_TOSTRING(CallExpr);
		CX_CURSOR_TOSTRING(ObjCMessageExpr);
		CX_CURSOR_TOSTRING(BlockExpr);
		CX_CURSOR_TOSTRING(IntegerLiteral);
		CX_CURSOR_TOSTRING(FloatingLiteral);
		CX_CURSOR_TOSTRING(ImaginaryLiteral);
		CX_CURSOR_TOSTRING(StringLiteral);
		CX_CURSOR_TOSTRING(CharacterLiteral);
		CX_CURSOR_TOSTRING(ParenExpr);
		CX_CURSOR_TOSTRING(UnaryOperator);
		CX_CURSOR_TOSTRING(ArraySubscriptExpr);
		CX_CURSOR_TOSTRING(BinaryOperator);
		CX_CURSOR_TOSTRING(CompoundAssignOperator);
		CX_CURSOR_TOSTRING(ConditionalOperator);
		CX_CURSOR_TOSTRING(CStyleCastExpr);
		CX_CURSOR_TOSTRING(CompoundLiteralExpr);
		CX_CURSOR_TOSTRING(InitListExpr);
		CX_CURSOR_TOSTRING(AddrLabelExpr);
		CX_CURSOR_TOSTRING(StmtExpr);
		CX_CURSOR_TOSTRING(GenericSelectionExpr);
		CX_CURSOR_TOSTRING(GNUNullExpr);
		CX_CURSOR_TOSTRING(CXXStaticCastExpr);
		CX_CURSOR_TOSTRING(CXXDynamicCastExpr);
		CX_CURSOR_TOSTRING(CXXReinterpretCastExpr);
		CX_CURSOR_TOSTRING(CXXConstCastExpr);
		CX_CURSOR_TOSTRING(CXXFunctionalCastExpr);
		CX_CURSOR_TOSTRING(CXXTypeidExpr);
		CX_CURSOR_TOSTRING(CXXBoolLiteralExpr);
		CX_CURSOR_TOSTRING(CXXNullPtrLiteralExpr);
		CX_CURSOR_TOSTRING(CXXThisExpr);
		CX_CURSOR_TOSTRING(CXXThrowExpr);
		CX_CURSOR_TOSTRING(CXXNewExpr);
		CX_CURSOR_TOSTRING(CXXDeleteExpr);
		CX_CURSOR_TOSTRING(UnaryExpr);
		CX_CURSOR_TOSTRING(ObjCStringLiteral);
		CX_CURSOR_TOSTRING(ObjCEncodeExpr);
		CX_CURSOR_TOSTRING(ObjCSelectorExpr);
		CX_CURSOR_TOSTRING(ObjCProtocolExpr);
		CX_CURSOR_TOSTRING(ObjCBridgedCastExpr);
		CX_CURSOR_TOSTRING(PackExpansionExpr);
		CX_CURSOR_TOSTRING(SizeOfPackExpr);
		CX_CURSOR_TOSTRING(LambdaExpr);
		CX_CURSOR_TOSTRING(ObjCBoolLiteralExpr);
		CX_CURSOR_TOSTRING(ObjCSelfExpr);
		CX_CURSOR_TOSTRING(FirstStmt);
		CX_CURSOR_TOSTRING(LabelStmt);
		CX_CURSOR_TOSTRING(CompoundStmt);
		CX_CURSOR_TOSTRING(CaseStmt);
		CX_CURSOR_TOSTRING(DefaultStmt);
		CX_CURSOR_TOSTRING(IfStmt);
		CX_CURSOR_TOSTRING(SwitchStmt);
		CX_CURSOR_TOSTRING(WhileStmt);
		CX_CURSOR_TOSTRING(DoStmt);
		CX_CURSOR_TOSTRING(ForStmt);
		CX_CURSOR_TOSTRING(GotoStmt);
		CX_CURSOR_TOSTRING(IndirectGotoStmt);
		CX_CURSOR_TOSTRING(ContinueStmt);
		CX_CURSOR_TOSTRING(BreakStmt);
		CX_CURSOR_TOSTRING(ReturnStmt);
		CX_CURSOR_TOSTRING(GCCAsmStmt);
		CX_CURSOR_TOSTRING(ObjCAtTryStmt);
		CX_CURSOR_TOSTRING(ObjCAtCatchStmt);
		CX_CURSOR_TOSTRING(ObjCAtFinallyStmt);
		CX_CURSOR_TOSTRING(ObjCAtThrowStmt);
		CX_CURSOR_TOSTRING(ObjCAtSynchronizedStmt);
		CX_CURSOR_TOSTRING(ObjCAutoreleasePoolStmt);
		CX_CURSOR_TOSTRING(ObjCForCollectionStmt);
		CX_CURSOR_TOSTRING(CXXCatchStmt);
		CX_CURSOR_TOSTRING(CXXTryStmt);
		CX_CURSOR_TOSTRING(CXXForRangeStmt);
		CX_CURSOR_TOSTRING(SEHTryStmt);
		CX_CURSOR_TOSTRING(SEHExceptStmt);
		CX_CURSOR_TOSTRING(SEHFinallyStmt);
		CX_CURSOR_TOSTRING(MSAsmStmt);
		CX_CURSOR_TOSTRING(NullStmt);
		CX_CURSOR_TOSTRING(DeclStmt);
		CX_CURSOR_TOSTRING(OMPParallelDirective);
		CX_CURSOR_TOSTRING(TranslationUnit);
		CX_CURSOR_TOSTRING(FirstAttr);
		CX_CURSOR_TOSTRING(IBActionAttr);
		CX_CURSOR_TOSTRING(IBOutletAttr);
		CX_CURSOR_TOSTRING(IBOutletCollectionAttr);
		CX_CURSOR_TOSTRING(CXXFinalAttr);
		CX_CURSOR_TOSTRING(CXXOverrideAttr);
		CX_CURSOR_TOSTRING(AnnotateAttr);
		CX_CURSOR_TOSTRING(AsmLabelAttr);
		CX_CURSOR_TOSTRING(PackedAttr);
		CX_CURSOR_TOSTRING(PreprocessingDirective);
		CX_CURSOR_TOSTRING(MacroDefinition);
		CX_CURSOR_TOSTRING(MacroExpansion);
		CX_CURSOR_TOSTRING(InclusionDirective);
		CX_CURSOR_TOSTRING(ModuleImportDecl);
#undef CX_CURSOR_TOSTRING
		default:
			return "Unknown CXCursorKind: " + std::to_string(kind);
		}
	}

}}}
